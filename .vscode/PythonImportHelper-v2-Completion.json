[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "twitchio.ext",
        "description": "twitchio.ext",
        "isExtraImport": true,
        "detail": "twitchio.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "twitchio.ext",
        "description": "twitchio.ext",
        "isExtraImport": true,
        "detail": "twitchio.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "twitchio.ext",
        "description": "twitchio.ext",
        "isExtraImport": true,
        "detail": "twitchio.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "twitchio.ext",
        "description": "twitchio.ext",
        "isExtraImport": true,
        "detail": "twitchio.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "twitchio.ext",
        "description": "twitchio.ext",
        "isExtraImport": true,
        "detail": "twitchio.ext",
        "documentation": {}
    },
    {
        "label": "update_user_stats",
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "isExtraImport": true,
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "hash_sha256",
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "isExtraImport": true,
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "get_attr",
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "isExtraImport": true,
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "TwitchChannels",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchChannels",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchChannels",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "isExtraImport": true,
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "migrate",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "emoji",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emoji",
        "description": "emoji",
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "demojize",
        "importPath": "emoji",
        "description": "emoji",
        "isExtraImport": true,
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "demojize",
        "importPath": "emoji",
        "description": "emoji",
        "isExtraImport": true,
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "add_user",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "list_channels",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "list_users",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "remove_user",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "force_update",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "message_count",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "find_message",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "sysinfo",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "total_messages",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "optin",
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "isExtraImport": true,
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "TwitchConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "YoutubeConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "BaseView",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "expose",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.auth",
        "description": "app.auth",
        "isExtraImport": true,
        "detail": "app.auth",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "ffmpeg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ffmpeg",
        "description": "ffmpeg",
        "detail": "ffmpeg",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.scrapping",
        "description": "app.scrapping",
        "isExtraImport": true,
        "detail": "app.scrapping",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.scrapping",
        "description": "app.scrapping",
        "isExtraImport": true,
        "detail": "app.scrapping",
        "documentation": {}
    },
    {
        "label": "get_videos",
        "importPath": "app.scrapping.tools.YoutubeScrapping",
        "description": "app.scrapping.tools.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.scrapping.tools.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "get_videos",
        "importPath": "app.scrapping.tools.YoutubeScrapping",
        "description": "app.scrapping.tools.YoutubeScrapping",
        "isExtraImport": true,
        "detail": "app.scrapping.tools.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "generate_top_users_graph",
        "importPath": "app.scrapping.tools.TwitchScrapping",
        "description": "app.scrapping.tools.TwitchScrapping",
        "isExtraImport": true,
        "detail": "app.scrapping.tools.TwitchScrapping",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "APScheduler",
        "importPath": "flask_apscheduler",
        "description": "flask_apscheduler",
        "isExtraImport": true,
        "detail": "flask_apscheduler",
        "documentation": {}
    },
    {
        "label": "APScheduler",
        "importPath": "flask_apscheduler",
        "description": "flask_apscheduler",
        "isExtraImport": true,
        "detail": "flask_apscheduler",
        "documentation": {}
    },
    {
        "label": "Cache",
        "importPath": "flask_caching",
        "description": "flask_caching",
        "isExtraImport": true,
        "detail": "flask_caching",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "process_channel",
        "importPath": "tools.video",
        "description": "tools.video",
        "isExtraImport": true,
        "detail": "tools.video",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websocket",
        "description": "websocket",
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "authorized_users",
        "kind": 2,
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "peekOfCode": "def authorized_users(command_function):\n    @functools.wraps(command_function)\n    async def wrapper(ctx, *args, **kwargs):\n        auth_users = get_auth_users()\n        if ctx.author.name in auth_users:\n            # The user is authorized to use the command, so execute the command function\n            return await command_function(ctx, *args, **kwargs)\n        else:\n            # The user is not authorized, so send an error message\n            pass",
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "get_auth_users",
        "kind": 2,
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "peekOfCode": "def get_auth_users():\n    return [user.username for user in TwitchUsers.query.all()]\ndef retry(max_retries=3, wait_time=1):\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            retries = 0\n            while retries < max_retries:\n                try:\n                    result = await func(*args, **kwargs)\n                    return result",
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "retry",
        "kind": 2,
        "importPath": "app.api.tools.twitch.commands",
        "description": "app.api.tools.twitch.commands",
        "peekOfCode": "def retry(max_retries=3, wait_time=1):\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            retries = 0\n            while retries < max_retries:\n                try:\n                    result = await func(*args, **kwargs)\n                    return result\n                except Exception:\n                    retries += 1",
        "detail": "app.api.tools.twitch.commands",
        "documentation": {}
    },
    {
        "label": "level_filter",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def level_filter(record):\n    return record[\"level\"].name in [\"DEBUG\", \"INFO\", \"ERROR\"]\nlogger.add(\n    sys.stderr,\n    format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\",\n    filter=level_filter,\n    level=\"INFO\",\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "compress_message",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def compress_message(message):\n    return zlib.compress(message.encode())\ndef decompress_message(compressed_message):\n    return zlib.decompress(compressed_message).decode()\ndef get_attr(attr_name, obj) -> str:\n    if hasattr(obj, attr_name):\n        return getattr(obj, attr_name)\n    else:\n        return \"N/A\"\ndef hash_sha256(string):",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "decompress_message",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def decompress_message(compressed_message):\n    return zlib.decompress(compressed_message).decode()\ndef get_attr(attr_name, obj) -> str:\n    if hasattr(obj, attr_name):\n        return getattr(obj, attr_name)\n    else:\n        return \"N/A\"\ndef hash_sha256(string):\n    string_bytes = string.encode()\n    sha256 = hashlib.sha256()",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "get_attr",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def get_attr(attr_name, obj) -> str:\n    if hasattr(obj, attr_name):\n        return getattr(obj, attr_name)\n    else:\n        return \"N/A\"\ndef hash_sha256(string):\n    string_bytes = string.encode()\n    sha256 = hashlib.sha256()\n    sha256.update(string_bytes)\n    return sha256.hexdigest()",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "hash_sha256",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def hash_sha256(string):\n    string_bytes = string.encode()\n    sha256 = hashlib.sha256()\n    sha256.update(string_bytes)\n    return sha256.hexdigest()\ndef strip_u_e0000(input_str):\n    return re.sub(\"\\U000e0000\", \"\", input_str)\ndef strip_unicode(string):\n    stripped = \"\"\n    for char in string:",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "strip_u_e0000",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def strip_u_e0000(input_str):\n    return re.sub(\"\\U000e0000\", \"\", input_str)\ndef strip_unicode(string):\n    stripped = \"\"\n    for char in string:\n        if ord(char) < 128 or emoji.emojize(char) != char:\n            stripped += char\n            stripped = stripped.strip(\"\")\n            stripped = re.sub(\"\\W+\", \" \", string).strip()\n    return stripped",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "strip_unicode",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def strip_unicode(string):\n    stripped = \"\"\n    for char in string:\n        if ord(char) < 128 or emoji.emojize(char) != char:\n            stripped += char\n            stripped = stripped.strip(\"\")\n            stripped = re.sub(\"\\W+\", \" \", string).strip()\n    return stripped\ndef update_user_stats():\n    # Get distinct usernames from TwitchMessages table",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "update_user_stats",
        "kind": 2,
        "importPath": "app.api.tools.apitool",
        "description": "app.api.tools.apitool",
        "peekOfCode": "def update_user_stats():\n    # Get distinct usernames from TwitchMessages table\n    users = TwitchMessages.query.with_entities(TwitchMessages.username).distinct()\n    for user in users:\n        # Get messages sent by user\n        messages = TwitchMessages.query.filter_by(username=user[0]).all()\n        if len(messages) > 0:\n            # Calculate average message length\n            total_length = sum([len(message.message) for message in messages])\n            average_length = int(total_length / len(messages))",
        "detail": "app.api.tools.apitool",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "app.api.tools.twitchbot",
        "description": "app.api.tools.twitchbot",
        "peekOfCode": "class Bot(commands.Bot):\n    def __init__(self, app, db):\n        CHANNELS = [channel.channel for channel in TwitchChannels.query.all()]\n        super().__init__(\n            token=TwitchConfig.TOKEN,\n            prefix=TwitchConfig.PREFIX,\n            initial_channels=CHANNELS,\n        )\n        with app.app_context():\n            self.db = db",
        "detail": "app.api.tools.twitchbot",
        "documentation": {}
    },
    {
        "label": "check_api_key",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def check_api_key(fn):\n    @wraps(fn)\n    def decorated(*args, **kwargs):\n        api_key = request.headers.get(\"Authorization\")\n        api_key = api_key.translate(str.maketrans(\"\", \"\", string.whitespace))\n        user = User.query.filter_by(api_key=api_key).first()\n        if not user or not api_key:\n            return jsonify({\"error\": \"Invalid API key\"}), 401\n        if user.is_admin:\n            user.total_request_count += 1",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "regenerate_api_key",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def regenerate_api_key():\n    \"\"\"This function generates a new API key for a user, by first retrieving the user data associated with the\n    current API key provided by the client. It then uses the user's username and the request time to generate\n    a new API key using the sha256 hashlib algorithm. The new API key is then updated in the database.\n    Returns:\n        str: The current user's API key.\"\"\"\n    if request.method == \"POST\":\n        current_user_api = request.form.get(\"current_user_api_key\")\n        user = User.query.filter_by(api_key=current_user_api).first()\n        username = user.username",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def change_password():\n    if request.method == \"POST\":\n        current_password = request.form.get(\"current_password\")\n        new_password = request.form.get(\"new_password\")\n        confirm_password = request.form.get(\"confirm_password\")\n        with open(\"password.txt\", \"w\") as f:\n            f.write(new_password)\n        # check if new password and confirm password match\n        if new_password != confirm_password:\n            return jsonify(",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def home():\n    test = []\n    if request.method == \"GET\":\n        api_key = request.headers.get(\"Authorization\")\n        user = User.query.filter_by(api_key=api_key).first()\n        channels = db.session.query(YoutubeChannels).all()\n        for channel in channels:\n            test.append(channel.youtube_channel_id)\n    return jsonify(test)\n@api.route(\"/youtube/<youtube_channel_id>\", methods=[\"GET\"])",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "youtube",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def youtube(youtube_channel_id):\n    if request.method == \"GET\":\n        videos = (\n            Video.query.filter_by(author=youtube_channel_id)\n            .order_by(Video.publish_date.desc())\n            .all()\n        )\n        if videos:\n            video_list = []\n            for video in videos:",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "twitch_messages",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def twitch_messages(username):\n    if request.method == \"GET\":\n        messages = (\n            TwitchMessages.query.filter_by(username=username.lower(),)\n            .order_by(TwitchMessages.timestamp.asc())\n            .all()\n        )\n        if messages:\n            message_list = []\n            for message in messages:",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "deactivate_inactive_accounts",
        "kind": 2,
        "importPath": "app.auth.tools.AccountManagement",
        "description": "app.auth.tools.AccountManagement",
        "peekOfCode": "def deactivate_inactive_accounts():\n    one_week_ago = datetime.utcnow() - timedelta(weeks=1)\n    inactive_users = User.query.filter(User.last_request_time < one_week_ago).all()\n    for user in inactive_users:\n        user.active = False\n        db.session.commit()",
        "detail": "app.auth.tools.AccountManagement",
        "documentation": {}
    },
    {
        "label": "CustomAdmin",
        "kind": 6,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "class CustomAdmin(BaseView):\n    @expose(\"/\")\n    def index(self):\n        return self.render(\"/admin/CustomAdmin.html\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:  # type: ignore\n        return redirect(url_for(\"auth.dashboard\"))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        email = request.form.get(\"email\")\n        password = request.form.get(\"password\")\n        if user:\n            if bcrypt.check_password_hash(user.password, form.password.data):",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def register():\n    form = RegisterForm()\n    if form.validate_on_submit():\n        hashed_password = bcrypt.generate_password_hash(form.password.data)\n        hash_object = hashlib.sha256()\n        hash_object.update(form.username.data.encode())\n        hash_object.update(form.password.data.encode())\n        api_key = hash_object.hexdigest()\n        new_user = User(\n            username=form.username.data, password=hashed_password, api_key=api_key",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def logout():\n    logout_user()\n    flash(\"You have been logged out.\", category=\"info\")\n    return redirect(url_for(\"main.home\"))\n@bp.route(\"/dashboard/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef dashboard():\n    if current_user.is_authenticated:\n        return render_template(\"dashboard.html\", id=current_user.id)\n    else:",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def dashboard():\n    if current_user.is_authenticated:\n        return render_template(\"dashboard.html\", id=current_user.id)\n    else:\n        return \"Not logged in\"\n@bp.route(\"/dashboard/settings/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef settings():\n    return render_template(\"settings.html\", id=current_user.id)\n@bp.route(\"/dashboard/stats/\", methods=[\"GET\", \"POST\"])",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def settings():\n    return render_template(\"settings.html\", id=current_user.id)\n@bp.route(\"/dashboard/stats/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef stats():\n    return render_template(\"stats.html\", id=current_user.id)\nclass CustomAdmin(BaseView):\n    @expose(\"/\")\n    def index(self):\n        return self.render(\"/admin/CustomAdmin.html\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def stats():\n    return render_template(\"stats.html\", id=current_user.id)\nclass CustomAdmin(BaseView):\n    @expose(\"/\")\n    def index(self):\n        return self.render(\"/admin/CustomAdmin.html\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def page_not_found(e):\n    return render_template('errors/404.html'), 404\n@bp.errorhandler(403)\ndef forbidden(e):\n    return render_template('errors/403.html'), 403\n@bp.errorhandler(413)\ndef request_entity_too_large(e):\n    return render_template('errors/413.html'), 413\n@bp.errorhandler(500)\ndef internal_server_error(e):",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "forbidden",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def forbidden(e):\n    return render_template('errors/403.html'), 403\n@bp.errorhandler(413)\ndef request_entity_too_large(e):\n    return render_template('errors/413.html'), 413\n@bp.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('errors/500.html'), 500\n@bp.route('/')\ndef home():",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "request_entity_too_large",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def request_entity_too_large(e):\n    return render_template('errors/413.html'), 413\n@bp.errorhandler(500)\ndef internal_server_error(e):\n    return render_template('errors/500.html'), 500\n@bp.route('/')\ndef home():\n    return render_template('index.html')\n@bp.route('/about')\ndef about():",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "internal_server_error",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def internal_server_error(e):\n    return render_template('errors/500.html'), 500\n@bp.route('/')\ndef home():\n    return render_template('index.html')\n@bp.route('/about')\ndef about():\n    return render_template('about.html')",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def home():\n    return render_template('index.html')\n@bp.route('/about')\ndef about():\n    return render_template('about.html')",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def about():\n    return render_template('about.html')",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "SocialMedia",
        "kind": 6,
        "importPath": "app.models.SocialScrapper",
        "description": "app.models.SocialScrapper",
        "peekOfCode": "class SocialMedia(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    twitter = db.Column(db.String(255), unique=True, nullable=True)\n    instagram = db.Column(db.String(255), unique=True, nullable=True)\n    tiktok = db.Column(db.String(255), unique=True, nullable=True)\n    YouTube = db.Column(db.String(255), unique=True, nullable=True)\n    Twitch = db.Column(db.String(255), unique=True, nullable=True)",
        "detail": "app.models.SocialScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchMessages",
        "kind": 6,
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "peekOfCode": "class TwitchMessages(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(20), nullable=False)\n    channel = db.Column(db.String(50), nullable=False)\n    username = db.Column(db.String(50), nullable=False)\n    message = db.Column(db.String(500), nullable=False)\n    hashed_message = db.Column(db.String(64), nullable=False)\n    def __repr__(self):\n        return f\"Message('{self.timestamp}', '{self.channel}', '{self.username}', '{self.message}', '{self.hashed_message}')\"\nclass TwitchUsers(db.Model):",
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchUsers",
        "kind": 6,
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "peekOfCode": "class TwitchUsers(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50), nullable=False)\n    message_count = db.Column(db.Integer, default=0, nullable=False)\n    average_message_length = db.Column(db.Integer, default=0, nullable=False)\n    daily_average_message_count = db.Column(db.Integer, default=0, nullable=False)\nclass TwitchChannels(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    channel = db.Column(db.String(50), nullable=False)\n    message_count = db.Column(db.Integer, default=0, nullable=False)",
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "TwitchChannels",
        "kind": 6,
        "importPath": "app.models.TwitchScrapper",
        "description": "app.models.TwitchScrapper",
        "peekOfCode": "class TwitchChannels(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    channel = db.Column(db.String(50), nullable=False)\n    message_count = db.Column(db.Integer, default=0, nullable=False)",
        "detail": "app.models.TwitchScrapper",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "kind": 6,
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "peekOfCode": "class YoutubeChannels(db.Model):\n    \"\"\"Youtube Channels to scrape.\"\"\"\n    id = db.Column(\n        db.Integer, unique=True, primary_key=True)\n    youtube_channel_id = db.Column(\n        db.String(255), unique=True, nullable=False)\nclass Video(db.Model):\n    \"\"\"Model for youtube video data.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    url = db.Column(db.Text, nullable=False)",
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "Video",
        "kind": 6,
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "peekOfCode": "class Video(db.Model):\n    \"\"\"Model for youtube video data.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    url = db.Column(db.Text, nullable=False)\n    title = db.Column(db.Text, nullable=False)\n    author = db.Column(db.Text, nullable=False)\n    publish_date = db.Column(db.Text, nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    views = db.Column(db.Integer, nullable=False)\n    length = db.Column(db.Float, nullable=False)",
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class User(db.Model, UserMixin):\n    \"\"\"\n    User account model.\n    This class represents the User object and its attributes, which are mapped to columns in a database table using SQLAlchemy.\n    Args:\n        db.Model: base class for all models.\n        UserMixin: provides basic user authentication methods.\n    Attributes:\n        id (db.Integer): primary key, unique identifier for each user.\n        email (db.String): unique email address of the user.",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    username = StringField(\n        label=\"Username\",\n        validators=[DataRequired(), Length(min=4, max=20)],\n        render_kw={\"placeholder\": \"Username\"},\n    )\n    password = PasswordField(\n        label=\"Password\",\n        validators=[DataRequired(), Length(min=4, max=20)],\n        render_kw={\"placeholder\": \"Password\"},",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class LoginForm(FlaskForm):\n    username = StringField(\n        label=\"Username\",\n        validators=[DataRequired(), Length(min=4, max=20)],\n        render_kw={\"placeholder\": \"Username\"},\n    )\n    password = PasswordField(\n        label=\"Password\",\n        validators=[DataRequired(), Length(min=4, max=20)],\n        render_kw={\"placeholder\": \"Password\"},",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class Controller(ModelView):\n    \"\"\"The admin controller\"\"\"\n    def is_accessible(self):\n        if current_user.is_authenticated:\n            if current_user.is_admin is True:\n                return current_user.is_authenticated\n            else:\n                return abort(404)\n            # return current_user.is_authenticated\n        else:",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(user_id)\nclass Controller(ModelView):\n    \"\"\"The admin controller\"\"\"\n    def is_accessible(self):\n        if current_user.is_authenticated:\n            if current_user.is_admin is True:\n                return current_user.is_authenticated\n            else:\n                return abort(404)",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "UserAdminView",
        "kind": 6,
        "importPath": "app.models.admin",
        "description": "app.models.admin",
        "peekOfCode": "class UserAdminView(ModelView):\n    column_display_pk = True\nclass MyAdminView(Controller, ModelView):\n    template = 'admin/custom.html'\n    def is_accessible(self):\n        if current_user.is_authenticated:\n            if current_user.is_admin is True:\n                return current_user.is_authenticated\n            else:\n                return abort(404)",
        "detail": "app.models.admin",
        "documentation": {}
    },
    {
        "label": "MyAdminView",
        "kind": 6,
        "importPath": "app.models.admin",
        "description": "app.models.admin",
        "peekOfCode": "class MyAdminView(Controller, ModelView):\n    template = 'admin/custom.html'\n    def is_accessible(self):\n        if current_user.is_authenticated:\n            if current_user.is_admin is True:\n                return current_user.is_authenticated\n            else:\n                return abort(404)\n            # return current_user.is_authenticated\n        else:",
        "detail": "app.models.admin",
        "documentation": {}
    },
    {
        "label": "generate_top_users_graph",
        "kind": 2,
        "importPath": "app.scrapping.tools.TwitchScrapping",
        "description": "app.scrapping.tools.TwitchScrapping",
        "peekOfCode": "def generate_top_users_graph():\n    # Query the database to get the top users with the most amount of messages\n    top_users = (\n        TwitchUsers.query.order_by(TwitchUsers.message_count.desc()).limit(10).all()\n    )\n    # Extract the usernames and message counts\n    usernames = [user.username for user in top_users]\n    message_counts = [user.message_count for user in top_users]\n    # Create a bar chart to display the message counts for each user\n    plt.bar(usernames, message_counts)",
        "detail": "app.scrapping.tools.TwitchScrapping",
        "documentation": {}
    },
    {
        "label": "YoutubeScraper",
        "kind": 6,
        "importPath": "app.scrapping.tools.YoutubeScrapping",
        "description": "app.scrapping.tools.YoutubeScrapping",
        "peekOfCode": "class YoutubeScraper:\n    \"\"\"Class for scraping youtube channels\"\"\"\n    def __init__(self):\n        self.valid_links = [\"https://www.youtube.com/c/\", \"https://www.youtube.com/channel/\",\n                            \"https://www.youtube.com/feeds/videos.xml?channel_id=\"]\n        self.blacklisted_chars = [\"<\", \">\", \":\", '\"', \"/\",\n                                  \"backslash\", \"|\", \"?\", \"*\", \".\", \"..\"]\n        # Define a filter function\n        def level_filter(record):\n            return record['level'].name in ['DEBUG', 'INFO', 'ERROR']",
        "detail": "app.scrapping.tools.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "get_videos",
        "kind": 2,
        "importPath": "app.scrapping.tools.YoutubeScrapping",
        "description": "app.scrapping.tools.YoutubeScrapping",
        "peekOfCode": "def get_videos():\n    paths = []\n    paths_clean = []\n    channel_names = []\n    for root, dirs, files in os.walk(YoutubeConfig.YOUTUBE_VIDEOS_PATH):\n        for file in files:\n            if file.lower().endswith(\".mp4\".lower()):\n                paths.append(os.path.join(root, file))\n                for path in paths:\n                    path_list = path.split(os.path.sep)[-4:]",
        "detail": "app.scrapping.tools.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "configure_tasks",
        "kind": 2,
        "importPath": "app.scrapping.tools.tasks",
        "description": "app.scrapping.tools.tasks",
        "peekOfCode": "def configure_tasks(app):\n    @scheduler.task('interval', id='scrape_videos', minutes=5,)\n    def scrape_channels():\n       pass",
        "detail": "app.scrapping.tools.tasks",
        "documentation": {}
    },
    {
        "label": "videos",
        "kind": 2,
        "importPath": "app.scrapping.routes",
        "description": "app.scrapping.routes",
        "peekOfCode": "def videos(filename):\n    return render_template('videos.html', video_file=filename)\nfrom flask import render_template\n@bp.route('/top_users')\ndef top_users():\n    # Generate the graph and save it as an image file\n    generate_top_users_graph()\n    # Render an HTML template that includes the image\n    return render_template('top_users.html')",
        "detail": "app.scrapping.routes",
        "documentation": {}
    },
    {
        "label": "top_users",
        "kind": 2,
        "importPath": "app.scrapping.routes",
        "description": "app.scrapping.routes",
        "peekOfCode": "def top_users():\n    # Generate the graph and save it as an image file\n    generate_top_users_graph()\n    # Render an HTML template that includes the image\n    return render_template('top_users.html')",
        "detail": "app.scrapping.routes",
        "documentation": {}
    },
    {
        "label": "level_filter",
        "kind": 2,
        "importPath": "app.commands",
        "description": "app.commands",
        "peekOfCode": "def level_filter(record):\n    return record[\"level\"].name in [\"DEBUG\", \"INFO\", \"ERROR\"]\n# FINISH the logger configuration\nlogger.add(\n    sys.stderr,\n    format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\",\n    filter=level_filter,\n    level=\"INFO\",\n    enqueue=True,\n    backtrace=True,",
        "detail": "app.commands",
        "documentation": {}
    },
    {
        "label": "configure_cli",
        "kind": 2,
        "importPath": "app.commands",
        "description": "app.commands",
        "peekOfCode": "def configure_cli(app):\n    @app.cli.command()\n    def init_db():\n        \"\"\"Initializes the database.\"\"\"\n        db.drop_all()\n        db.create_all()\n    @app.cli.command()\n    def create_db():\n        \"\"\"Creates the database.\"\"\"\n        db.create_all()",
        "detail": "app.commands",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "db = SQLAlchemy()\nbcrypt = Bcrypt()\nlogin_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "bcrypt = Bcrypt()\nlogin_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "admin = Admin()\nscheduler = APScheduler()\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "scheduler = APScheduler()\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "cache = Cache(config={'CACHE_TYPE': 'SimpleCache'})\nmigrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "migrate = Migrate()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.Column('average_message_length', sa.Integer(), nullable=False),\n    sa.Column('daily_average_message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('twitch_users')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "revision = '1a082cdfd53f'\ndown_revision = '4df99c54c11e'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "down_revision = '4df99c54c11e'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.Column('average_message_length', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.Column('average_message_length', sa.Integer(), nullable=False),\n    sa.Column('daily_average_message_count', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.1a082cdfd53f_",
        "description": "migrations.versions.1a082cdfd53f_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.Column('average_message_length', sa.Integer(), nullable=False),\n    sa.Column('daily_average_message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.1a082cdfd53f_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_channels',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('twitch_channels')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "revision = '36e428c1c745'\ndown_revision = '1a082cdfd53f'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_channels',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "down_revision = '1a082cdfd53f'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_channels',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_channels',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.36e428c1c745_",
        "description": "migrations.versions.36e428c1c745_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_channels',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('message_count', sa.Integer(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.36e428c1c745_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_messages',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('timestamp', sa.String(length=20), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message', sa.String(length=500), nullable=False),\n    sa.Column('hashed_message', sa.String(length=64), nullable=False),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('twitch_messages')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "revision = '4df99c54c11e'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_messages',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('timestamp', sa.String(length=20), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_messages',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('timestamp', sa.String(length=20), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_messages',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('timestamp', sa.String(length=20), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message', sa.String(length=500), nullable=False),",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.4df99c54c11e_",
        "description": "migrations.versions.4df99c54c11e_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('twitch_messages',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('timestamp', sa.String(length=20), nullable=False),\n    sa.Column('channel', sa.String(length=50), nullable=False),\n    sa.Column('username', sa.String(length=50), nullable=False),\n    sa.Column('message', sa.String(length=500), nullable=False),\n    sa.Column('hashed_message', sa.String(length=64), nullable=False),",
        "detail": "migrations.versions.4df99c54c11e_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\n# add your model's MetaData object here\n# for 'autogenerate' support",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "process_channel",
        "kind": 2,
        "importPath": "test.Youtube-Automation.tools.video",
        "description": "test.Youtube-Automation.tools.video",
        "peekOfCode": "def process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])\n    try:\n        html = requests.get(channel + \"/videos\").text\n        info = re.search('(?<={\"label\":\").*?(?=\"})', html).group()",
        "detail": "test.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "test.Youtube-Automation.tools.video",
        "description": "test.Youtube-Automation.tools.video",
        "peekOfCode": "def process_video(url):\n    blacklisted_chars = [\"<\", \">\", \":\", '\"', \"/\",\n                         \"backslash\", \"|\", \"?\", \"*\", \".\", \"..\"]\n    video = YouTube(\n        url,\n        on_complete_callback=None,\n        on_progress_callback=None)\n    title = video.title\n    for char in blacklisted_chars:\n        title = title.replace(char, \"\")",
        "detail": "test.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "request.default_range_size",
        "kind": 5,
        "importPath": "test.Youtube-Automation.tools.video",
        "description": "test.Youtube-Automation.tools.video",
        "peekOfCode": "request.default_range_size = 10485760\ndef process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])\n    try:\n        html = requests.get(channel + \"/videos\").text",
        "detail": "test.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "so_file",
        "kind": 5,
        "importPath": "test.cLib.main",
        "description": "test.cLib.main",
        "peekOfCode": "so_file = f\"{os.getcwd()}/tests/cLib/lib.so\"\nprint(so_file)\nmy_functions = CDLL(so_file)\nprint(type(my_functions))\nprint(my_functions.lol())",
        "detail": "test.cLib.main",
        "documentation": {}
    },
    {
        "label": "my_functions",
        "kind": 5,
        "importPath": "test.cLib.main",
        "description": "test.cLib.main",
        "peekOfCode": "my_functions = CDLL(so_file)\nprint(type(my_functions))\nprint(my_functions.lol())",
        "detail": "test.cLib.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "def main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')\n            if resp.startswith('PING'):",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "server = 'irc.chat.twitch.tv'\nport = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "port = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "nickname",
        "kind": 5,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "nickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "token = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "test.twitch.chat_logger",
        "description": "test.twitch.chat_logger",
        "peekOfCode": "channel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')",
        "detail": "test.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "get_chat_dataframe",
        "kind": 2,
        "importPath": "test.twitch.chat_parser",
        "description": "test.twitch.chat_parser",
        "peekOfCode": "def get_chat_dataframe(file):\n    data = []\n    with open(file, 'r', encoding='utf-8') as f:\n        lines = [line for line in f]\n        for line in lines:\n            try:\n                #print(line)\n                time_logged = line.split('—')[0].strip()\n                time_logged = datetime.strptime(time_logged, '%Y-%m-%d_%H:%M:%S')\n                username_message = line.split('—')[1:]",
        "detail": "test.twitch.chat_parser",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "HOST = \"irc.chat.twitch.tv\"\nPORT = 6667\nNICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNELS = [\"#yourragegaming\", \"#kaicenat\", \"#fanum\", \"#sheedfe\"]\nTARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "PORT = 6667\nNICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNELS = [\"#yourragegaming\", \"#kaicenat\", \"#fanum\", \"#sheedfe\"]\nTARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",\n    \"hxrtwell_\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "NICK",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "NICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNELS = [\"#yourragegaming\", \"#kaicenat\", \"#fanum\", \"#sheedfe\"]\nTARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",\n    \"hxrtwell_\",\n    \"kiairuh\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "PASS",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "PASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNELS = [\"#yourragegaming\", \"#kaicenat\", \"#fanum\", \"#sheedfe\"]\nTARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",\n    \"hxrtwell_\",\n    \"kiairuh\",\n    \"giovannisantana\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "CHANNELS",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "CHANNELS = [\"#yourragegaming\", \"#kaicenat\", \"#fanum\", \"#sheedfe\"]\nTARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",\n    \"hxrtwell_\",\n    \"kiairuh\",\n    \"giovannisantana\",\n    \"odenboiled\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "TARGET_USERS",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "TARGET_USERS = [\n    \"icyjaylenn\",\n    \"yourragegaming\",\n    \"zoidnl\",\n    \"afroakatsuki\",\n    \"hxrtwell_\",\n    \"kiairuh\",\n    \"giovannisantana\",\n    \"odenboiled\",\n    \"manithemenace\",",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "executor",
        "kind": 5,
        "importPath": "test.twitch.chatlogger",
        "description": "test.twitch.chatlogger",
        "peekOfCode": "executor = ThreadPoolExecutor(max_workers=2)\nasync def handle_connection(reader: StreamReader, writer: StreamWriter, channel: str):\n    await join_channel(writer, channel)\n    while True:\n        response = await reader.readline()\n        response = response.decode(\"utf-8\").strip()\n        if response == \"PING :tmi.twitch.tv\":\n            writer.write(\"PONG :tmi.twitch.tv\\r\\n\".encode(\"utf-8\"))\n            await writer.drain()\n        else:",
        "detail": "test.twitch.chatlogger",
        "documentation": {}
    },
    {
        "label": "on_message",
        "kind": 2,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "def on_message(ws, message):\n    data = json.loads(message)\n    if \"data\" in data:\n        chat_message = json.loads(data[\"data\"])\n        print(f\"Message from {chat_message['user_name']}: {chat_message['message']}\")\ndef on_error(ws, error):\n    print(f\"Error: {error}\")\ndef on_close(ws):\n    print(\"Connection closed.\")\ndef on_open(ws):",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "on_error",
        "kind": 2,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "def on_error(ws, error):\n    print(f\"Error: {error}\")\ndef on_close(ws):\n    print(\"Connection closed.\")\ndef on_open(ws):\n    channel = \"yourragegaming\"\n    ws.send(json.dumps({\n        \"type\": \"LISTEN\",\n        \"data\": {\n            \"topics\": [f\"channel-chat-events-v1.{channel}\"],",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "on_close",
        "kind": 2,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "def on_close(ws):\n    print(\"Connection closed.\")\ndef on_open(ws):\n    channel = \"yourragegaming\"\n    ws.send(json.dumps({\n        \"type\": \"LISTEN\",\n        \"data\": {\n            \"topics\": [f\"channel-chat-events-v1.{channel}\"],\n            \"auth_token\": token\n        }",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "on_open",
        "kind": 2,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "def on_open(ws):\n    channel = \"yourragegaming\"\n    ws.send(json.dumps({\n        \"type\": \"LISTEN\",\n        \"data\": {\n            \"topics\": [f\"channel-chat-events-v1.{channel}\"],\n            \"auth_token\": token\n        }\n    }))\nwebsocket.enableTrace(True)",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "client_id",
        "kind": 5,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "client_id = \"lxvuai3upp1ogwrfusz6z4xbzjf8dg\"\nresponse = requests.post(\n    \"https://id.twitch.tv/oauth2/token\",\n    data={\n        \"client_id\": client_id,\n        \"client_secret\": \"jj42c1w22zenmjzv1f246ct1gzvgo5\",\n        \"grant_type\": \"client_credentials\",\n        \"scope\": \"chat:edit chat:read\"\n    }\n)",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "response = requests.post(\n    \"https://id.twitch.tv/oauth2/token\",\n    data={\n        \"client_id\": client_id,\n        \"client_secret\": \"jj42c1w22zenmjzv1f246ct1gzvgo5\",\n        \"grant_type\": \"client_credentials\",\n        \"scope\": \"chat:edit chat:read\"\n    }\n)\ntoken = response.json()[\"access_token\"]",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "token = response.json()[\"access_token\"]\ndef on_message(ws, message):\n    data = json.loads(message)\n    if \"data\" in data:\n        chat_message = json.loads(data[\"data\"])\n        print(f\"Message from {chat_message['user_name']}: {chat_message['message']}\")\ndef on_error(ws, error):\n    print(f\"Error: {error}\")\ndef on_close(ws):\n    print(\"Connection closed.\")",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "ws",
        "kind": 5,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "ws = websocket.WebSocketApp(\n    \"wss://pubsub-edge.twitch.tv\",\n    on_message=on_message,\n    on_error=on_error,\n    on_close=on_close\n)\nws.on_open = on_open\nws.run_forever()",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "ws.on_open",
        "kind": 5,
        "importPath": "test.twitch.logger2",
        "description": "test.twitch.logger2",
        "peekOfCode": "ws.on_open = on_open\nws.run_forever()",
        "detail": "test.twitch.logger2",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "class Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job1",
        "kind": 2,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "def job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples\n@scheduler.task(\"cron\", id=\"do_job_2\", minute=1)\ndef job2():\n    \"\"\"Sample job 2.\"\"\"\n    print(f\"Job 2 executed at {current_time}\")\n@scheduler.task(\"cron\", id=\"do_job_3\", week=\"*\", day_of_week=\"sun\")\ndef job3():",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job2",
        "kind": 2,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "def job2():\n    \"\"\"Sample job 2.\"\"\"\n    print(f\"Job 2 executed at {current_time}\")\n@scheduler.task(\"cron\", id=\"do_job_3\", week=\"*\", day_of_week=\"sun\")\ndef job3():\n    \"\"\"Sample job 3.\"\"\"\n    print(f\"Job 3 executed at {current_time}\")\n@app.route(\"/\")\n@app.route(\"/home/\")\nasync def index():",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job3",
        "kind": 2,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "def job3():\n    \"\"\"Sample job 3.\"\"\"\n    print(f\"Job 3 executed at {current_time}\")\n@app.route(\"/\")\n@app.route(\"/home/\")\nasync def index():\n    return \"<h1>Home</h1>\"\nif __name__ == \"__main__\":\n    app.config.from_object(Config())\n    # it is also possible to enable the API directly",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "app = Flask(__name__)\nnow = datetime.now()\ncurrent_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "now = datetime.now()\ncurrent_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "current_time",
        "kind": 5,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "current_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "test.backgroundtest",
        "description": "test.backgroundtest",
        "peekOfCode": "scheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples\n@scheduler.task(\"cron\", id=\"do_job_2\", minute=1)\ndef job2():\n    \"\"\"Sample job 2.\"\"\"",
        "detail": "test.backgroundtest",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "test.dbtest",
        "description": "test.dbtest",
        "peekOfCode": "class Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(20), nullable=False)\n    channel = db.Column(db.String(50), nullable=False)\n    username = db.Column(db.String(50), nullable=False)\n    message = db.Column(db.String(500), nullable=False)\n    hashed_message = db.Column(db.String(64), nullable=False)\n    def __repr__(self):\n        return f\"Message('{self.timestamp}', '{self.channel}', '{self.username}', '{self.message}', '{self.hashed_message}')\"\nwith app.app_context():",
        "detail": "test.dbtest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test.dbtest",
        "description": "test.dbtest",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(20), nullable=False)\n    channel = db.Column(db.String(50), nullable=False)\n    username = db.Column(db.String(50), nullable=False)\n    message = db.Column(db.String(500), nullable=False)\n    hashed_message = db.Column(db.String(64), nullable=False)",
        "detail": "test.dbtest",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "test.dbtest",
        "description": "test.dbtest",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'\ndb = SQLAlchemy(app)\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(20), nullable=False)\n    channel = db.Column(db.String(50), nullable=False)\n    username = db.Column(db.String(50), nullable=False)\n    message = db.Column(db.String(500), nullable=False)\n    hashed_message = db.Column(db.String(64), nullable=False)\n    def __repr__(self):",
        "detail": "test.dbtest",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "test.dbtest",
        "description": "test.dbtest",
        "peekOfCode": "db = SQLAlchemy(app)\nclass Message(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(20), nullable=False)\n    channel = db.Column(db.String(50), nullable=False)\n    username = db.Column(db.String(50), nullable=False)\n    message = db.Column(db.String(500), nullable=False)\n    hashed_message = db.Column(db.String(64), nullable=False)\n    def __repr__(self):\n        return f\"Message('{self.timestamp}', '{self.channel}', '{self.username}', '{self.message}', '{self.hashed_message}')\"",
        "detail": "test.dbtest",
        "documentation": {}
    },
    {
        "label": "level_filter",
        "kind": 2,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "def level_filter(record):\n    return record[\"level\"].name in [\"DEBUG\", \"INFO\", \"ERROR\"]\nlogger.add(\n    sys.stderr,\n    format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\",\n    filter=level_filter,\n    level=\"INFO\",\n    enqueue=True,\n    backtrace=True,\n    diagnose=True,",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "compress_message",
        "kind": 2,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "def compress_message(message):\n    return zlib.compress(message.encode())\ndef decompress_message(compressed_message):\n    return zlib.decompress(compressed_message).decode()\nmessage = \"This is a sample message\"\ncompressed_message = compress_message(message)\nprint(\"Compressed message:\", compressed_message)\ndecompressed_message = decompress_message(compressed_message)\nprint(\"Decompressed message:\", decompressed_message)",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "decompress_message",
        "kind": 2,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "def decompress_message(compressed_message):\n    return zlib.decompress(compressed_message).decode()\nmessage = \"This is a sample message\"\ncompressed_message = compress_message(message)\nprint(\"Compressed message:\", compressed_message)\ndecompressed_message = decompress_message(compressed_message)\nprint(\"Decompressed message:\", decompressed_message)",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "message = \"This is a sample message\"\ncompressed_message = compress_message(message)\nprint(\"Compressed message:\", compressed_message)\ndecompressed_message = decompress_message(compressed_message)\nprint(\"Decompressed message:\", decompressed_message)",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "compressed_message",
        "kind": 5,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "compressed_message = compress_message(message)\nprint(\"Compressed message:\", compressed_message)\ndecompressed_message = decompress_message(compressed_message)\nprint(\"Decompressed message:\", decompressed_message)",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "decompressed_message",
        "kind": 5,
        "importPath": "test.messagecomperssor",
        "description": "test.messagecomperssor",
        "peekOfCode": "decompressed_message = decompress_message(compressed_message)\nprint(\"Decompressed message:\", decompressed_message)",
        "detail": "test.messagecomperssor",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test.scrape",
        "description": "test.scrape",
        "peekOfCode": "url = 'https://www.sslproxies.org/'\n# Make a request to the website\nresponse = requests.get(url)\n# Parse the HTML content\nsoup = BeautifulSoup(response.text, 'html.parser')\n# Find the table containing the proxy information\ntable = soup.find('table', {'id': 'proxylisttable'})\n# Iterate through the rows of the table\nfor row in table.tbody.find_all('tr'):\n    # Extract the columns of the row",
        "detail": "test.scrape",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "test.scrape",
        "description": "test.scrape",
        "peekOfCode": "response = requests.get(url)\n# Parse the HTML content\nsoup = BeautifulSoup(response.text, 'html.parser')\n# Find the table containing the proxy information\ntable = soup.find('table', {'id': 'proxylisttable'})\n# Iterate through the rows of the table\nfor row in table.tbody.find_all('tr'):\n    # Extract the columns of the row\n    columns = row.find_all('td')\n    # Extract the proxy information",
        "detail": "test.scrape",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "test.scrape",
        "description": "test.scrape",
        "peekOfCode": "soup = BeautifulSoup(response.text, 'html.parser')\n# Find the table containing the proxy information\ntable = soup.find('table', {'id': 'proxylisttable'})\n# Iterate through the rows of the table\nfor row in table.tbody.find_all('tr'):\n    # Extract the columns of the row\n    columns = row.find_all('td')\n    # Extract the proxy information\n    ip = columns[0].text\n    port = columns[1].text",
        "detail": "test.scrape",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "test.scrape",
        "description": "test.scrape",
        "peekOfCode": "table = soup.find('table', {'id': 'proxylisttable'})\n# Iterate through the rows of the table\nfor row in table.tbody.find_all('tr'):\n    # Extract the columns of the row\n    columns = row.find_all('td')\n    # Extract the proxy information\n    ip = columns[0].text\n    port = columns[1].text\n    protocol = columns[5].text.lower()\n    # Print the proxy information",
        "detail": "test.scrape",
        "documentation": {}
    },
    {
        "label": "cpufreq",
        "kind": 5,
        "importPath": "test.sysinfo",
        "description": "test.sysinfo",
        "peekOfCode": "cpufreq = psutil.cpu_freq()\nprint(f\"  Max frequency: {cpufreq.max:.2f}Mhz\")\nprint(f\"  Min frequency: {cpufreq.min:.2f}Mhz\")\nprint(f\"  Current frequency: {cpufreq.current:.2f}Mhz\")\n# Get memory information\nprint(\"\\nMemory:\")\nsvmem = psutil.virtual_memory()\nprint(f\"  Total: {svmem.total / (1024**2):.2f} MB\")\nprint(f\"  Available: {svmem.available / (1024**2):.2f} MB\")\nprint(f\"  Used: {svmem.used / (1024**2):.2f} MB\")",
        "detail": "test.sysinfo",
        "documentation": {}
    },
    {
        "label": "svmem",
        "kind": 5,
        "importPath": "test.sysinfo",
        "description": "test.sysinfo",
        "peekOfCode": "svmem = psutil.virtual_memory()\nprint(f\"  Total: {svmem.total / (1024**2):.2f} MB\")\nprint(f\"  Available: {svmem.available / (1024**2):.2f} MB\")\nprint(f\"  Used: {svmem.used / (1024**2):.2f} MB\")\nprint(f\"  Percentage: {svmem.percent}%\")\n# Get disk usage information\nprint(\"\\nDisk usage:\")\npartitions = psutil.disk_partitions()\nfor partition in partitions:\n    print(f\"  Device: {partition.device}\")",
        "detail": "test.sysinfo",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "test.sysinfo",
        "description": "test.sysinfo",
        "peekOfCode": "partitions = psutil.disk_partitions()\nfor partition in partitions:\n    print(f\"  Device: {partition.device}\")\n    print(f\"  Mountpoint: {partition.mountpoint}\")\n    print(f\"  File system type: {partition.fstype}\")\n    try:\n        partition_usage = psutil.disk_usage(partition.mountpoint)\n    except PermissionError:\n        continue\n    print(f\"  Total size: {partition_usage.total / (1024**3):.2f} GB\")",
        "detail": "test.sysinfo",
        "documentation": {}
    },
    {
        "label": "compress_video",
        "kind": 2,
        "importPath": "test.test2",
        "description": "test.test2",
        "peekOfCode": "def compress_video(video_full_path, output_file_name, target_size):\n    # Reference: https://en.wikipedia.org/wiki/Bit_rate#Encoding_bit_rate\n    min_audio_bitrate = 32000\n    max_audio_bitrate = 256000\n    probe = ffmpeg.probe(video_full_path)\n    # Video duration, in s.\n    duration = float(probe['format']['duration'])\n    # Audio bitrate, in bps.\n    audio_bitrate = float(next(\n        (s for s in probe['streams'] if s['codec_type'] == 'audio'), None)['bit_rate'])",
        "detail": "test.test2",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "def send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))\n    return data\ndef handle_message(sock, message, commands):\n    parts = message.split()\n    if len(parts) < 2:",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "receive_message",
        "kind": 2,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "def receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))\n    return data\ndef handle_message(sock, message, commands):\n    parts = message.split()\n    if len(parts) < 2:\n        return\n    command = parts[1].lower()",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "handle_message",
        "kind": 2,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "def handle_message(sock, message, commands):\n    parts = message.split()\n    if len(parts) < 2:\n        return\n    command = parts[1].lower()\n    if command in commands:\n        commands[command](sock)\ndef send_hello(sock):\n    send_message(sock, \"Hello!\")\ndef send_goodbye(sock):",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "send_hello",
        "kind": 2,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "def send_hello(sock):\n    send_message(sock, \"Hello!\")\ndef send_goodbye(sock):\n    send_message(sock, \"Goodbye!\")\ncommands = {\n    \"hello\": send_hello,\n    \"goodbye\": send_goodbye,\n    # Add more commands here\n}\nsock = socket.socket()",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "send_goodbye",
        "kind": 2,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "def send_goodbye(sock):\n    send_message(sock, \"Goodbye!\")\ncommands = {\n    \"hello\": send_hello,\n    \"goodbye\": send_goodbye,\n    # Add more commands here\n}\nsock = socket.socket()\nsock.connect((HOST, PORT))\nsock.send(f\"PASS {PASS}\\r\\n\".encode(\"utf-8\"))",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "HOST = \"irc.chat.twitch.tv\"\nPORT = 6667\nNICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNEL = \"#yourragegaming\"\ndef send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "PORT = 6667\nNICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNEL = \"#yourragegaming\"\ndef send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "NICK",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "NICK = \"icyjaylenn\"\nPASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNEL = \"#yourragegaming\"\ndef send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))\n    return data",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "PASS",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "PASS = \"oauth:p7ufzfxl6xdmmj2f9lcf1l6rmo4v31\"\nCHANNEL = \"#yourragegaming\"\ndef send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))\n    return data\ndef handle_message(sock, message, commands):",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "CHANNEL",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "CHANNEL = \"#yourragegaming\"\ndef send_message(sock, message):\n    sock.send(f\"PRIVMSG #{CHANNEL} :{message}\\r\\n\".encode(\"utf-8\"))\ndef receive_message(sock):\n    data = sock.recv(1024).decode(\"utf-8\")\n    if data.startswith(\"PING\"):\n        sock.send(\"PONG\\r\\n\".encode(\"utf-8\"))\n    return data\ndef handle_message(sock, message, commands):\n    parts = message.split()",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "commands",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "commands = {\n    \"hello\": send_hello,\n    \"goodbye\": send_goodbye,\n    # Add more commands here\n}\nsock = socket.socket()\nsock.connect((HOST, PORT))\nsock.send(f\"PASS {PASS}\\r\\n\".encode(\"utf-8\"))\nsock.send(f\"NICK {NICK}\\r\\n\".encode(\"utf-8\"))\nsock.send(f\"JOIN #{CHANNEL}\\r\\n\".encode(\"utf-8\"))",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "test.test4",
        "description": "test.test4",
        "peekOfCode": "sock = socket.socket()\nsock.connect((HOST, PORT))\nsock.send(f\"PASS {PASS}\\r\\n\".encode(\"utf-8\"))\nsock.send(f\"NICK {NICK}\\r\\n\".encode(\"utf-8\"))\nsock.send(f\"JOIN #{CHANNEL}\\r\\n\".encode(\"utf-8\"))\nwhile True:\n    message = receive_message(sock)\n    handle_message(sock, message, commands)",
        "detail": "test.test4",
        "documentation": {}
    },
    {
        "label": "debug_filter",
        "kind": 2,
        "importPath": "test.tests3",
        "description": "test.tests3",
        "peekOfCode": "def debug_filter(record):\n    return app.debug\n# Configure the logger to use the filter\nlogger.add(sink='app.log', filter=debug_filter)\n@app.route('/')\ndef index():\n    logger.debug('This message will be logged in debug mode')\n    logger.info('This message will be logged in debug mode')\n    logger.error('This message will be logged in debug mode')\n    return 'Hello, World!'",
        "detail": "test.tests3",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "test.tests3",
        "description": "test.tests3",
        "peekOfCode": "def index():\n    logger.debug('This message will be logged in debug mode')\n    logger.info('This message will be logged in debug mode')\n    logger.error('This message will be logged in debug mode')\n    return 'Hello, World!'\nif __name__ == '__main__':\n    app.run(debug=False)",
        "detail": "test.tests3",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test.tests3",
        "description": "test.tests3",
        "peekOfCode": "app = Flask(__name__)\n# Define a filter function\ndef debug_filter(record):\n    return app.debug\n# Configure the logger to use the filter\nlogger.add(sink='app.log', filter=debug_filter)\n@app.route('/')\ndef index():\n    logger.debug('This message will be logged in debug mode')\n    logger.info('This message will be logged in debug mode')",
        "detail": "test.tests3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "def main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')\n            if resp.startswith('PING'):",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "server = 'irc.chat.twitch.tv'\nport = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "port = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "nickname",
        "kind": 5,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "nickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "token = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "test.twitch",
        "description": "test.twitch",
        "peekOfCode": "channel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')",
        "detail": "test.twitch",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "test.twitchchatbot",
        "description": "test.twitchchatbot",
        "peekOfCode": "class Bot(commands.Bot):\n    def __init__(self):\n        super().__init__(token='msmzgz7k0mjn8wdcflist4a0o8ashq', prefix='!', initial_channels=['yourragegaming', 'icyjaylenn', \"scumtk\"])\n    async def event_ready(self):\n        print(f'Logged in as | {self.nick}')\n        print(f'User id is | {self.user_id}')\n    async def event_message(self, message):\n        try:\n            # Check that the message is not from the bot itself to avoid infinite loops\n            if message.author.name.lower() != self.nick.lower():",
        "detail": "test.twitchchatbot",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "test.twitchchatbot",
        "description": "test.twitchchatbot",
        "peekOfCode": "bot = Bot()\nbot.run()",
        "detail": "test.twitchchatbot",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "test.twitchchatbot2",
        "description": "test.twitchchatbot2",
        "peekOfCode": "class Bot(commands.Bot):\n    def __init__(self):\n        # Initialise our Bot with our access token, prefix and a list of channels to join on boot...\n        # prefix can be a callable, which returns a list of strings or a string...\n        # initial_channels can also be a callable which returns a list of strings...\n        super().__init__(token='msmzgz7k0mjn8wdcflist4a0o8ashq', prefix='!', initial_channels=['yourragegaming', 'icyjaylenn', \"scumtk\"])\n    async def event_ready(self):\n        # Notify us when everything is ready!\n        # We are logged in and ready to chat and use commands...\n        print(f'Logged in as | {self.nick}')",
        "detail": "test.twitchchatbot2",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "test.twitchchatbot2",
        "description": "test.twitchchatbot2",
        "peekOfCode": "bot = Bot()\nbot.run()\n# bot.run() is blocking and will stop execution of any below code here until stopped or closed.",
        "detail": "test.twitchchatbot2",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "test.twitchlogger2",
        "description": "test.twitchlogger2",
        "peekOfCode": "class Bot(commands.Bot):\n    def __init__(self):\n        # Initialise our Bot with our access token, prefix and a list of channels to join on boot...\n        # prefix can be a callable, which returns a list of strings or a string...\n        # initial_channels can also be a callable which returns a list of strings...\n        super().__init__(token='msmzgz7k0mjn8wdcflist4a0o8ashq', prefix='?', initial_channels=['yourragegaming', \"icyjaylenn\"])\n    async def event_ready(self):\n        # Notify us when everything is ready!\n        # We are logged in and ready to chat and use commands...\n        print(f'Logged in as | {self.nick}')",
        "detail": "test.twitchlogger2",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "test.twitchlogger2",
        "description": "test.twitchlogger2",
        "peekOfCode": "bot = Bot()\nbot.run()",
        "detail": "test.twitchlogger2",
        "documentation": {}
    },
    {
        "label": "channel_id",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "channel_id = 'https://www.youtube.com/@playback1949'\nfeed_url = f'https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}'\nhtml = requests.get(channel_id + \"/videos\").text\ninfo = re.search('(?<={\"label\":\").*?(?=\"})', html).group()\n#date = re.search('\\d+ \\w+ ago.*seconds ', info).group()\nurl = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "feed_url",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "feed_url = f'https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}'\nhtml = requests.get(channel_id + \"/videos\").text\ninfo = re.search('(?<={\"label\":\").*?(?=\"})', html).group()\n#date = re.search('\\d+ \\w+ ago.*seconds ', info).group()\nurl = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "html = requests.get(channel_id + \"/videos\").text\ninfo = re.search('(?<={\"label\":\").*?(?=\"})', html).group()\n#date = re.search('\\d+ \\w+ ago.*seconds ', info).group()\nurl = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "info = re.search('(?<={\"label\":\").*?(?=\"})', html).group()\n#date = re.search('\\d+ \\w+ ago.*seconds ', info).group()\nurl = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "#date",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "#date = re.search('\\d+ \\w+ ago.*seconds ', info).group()\nurl = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test.youtube",
        "description": "test.youtube",
        "peekOfCode": "url = \"https://www.youtube.com/watch?v=\" + \\\nre.search('(?<=\"videoId\":\").*?(?=\")', html).group()\nprint(url)",
        "detail": "test.youtube",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    \"\"\"Config For the main app\"\"\"\n    PORT = os.environ.get(\"PORT\") or 5000\n    SECRET_KEY = \"SECRET_KEY\"\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///../instance/database.db?check_same_thread=False\"\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECURITY_PASSWORD_SALT = os.environ.get(\"SECURITY_PASSWORD_SALT\")\n    SCRAPPED_VIDEOS_PATH = os.environ.get(\"SCRAPPED_VIDEOS_PATH\")\n    SCRAPPING_ENABLED = False\n    TWITCH_LISTENER_ENABLED = True",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "YoutubeConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class YoutubeConfig:\n    \"\"\"Configuration for youtube\"\"\"\n    YOUTUBE_VIDEOS_PATH = \"./instance/videos\"\n    YOUTUBE_VIDEO_DELAY = 1\nclass TwitchConfig:\n    \"\"\"Configuration for twitch\"\"\"\n    TOKEN = \"\"\n    PREFIX = \"+\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TwitchConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class TwitchConfig:\n    \"\"\"Configuration for twitch\"\"\"\n    TOKEN = \"\"\n    PREFIX = \"+\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\n# TODO Update variables for .env file with venv using python-dotenv make interchangeable inside a database config\nclass Config:\n    \"\"\"Config For the main app\"\"\"\n    PORT = os.environ.get(\"PORT\") or 5000\n    SECRET_KEY = \"SECRET_KEY\"\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///../instance/database.db?check_same_thread=False\"\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECURITY_PASSWORD_SALT = os.environ.get(\"SECURITY_PASSWORD_SALT\")\n    SCRAPPED_VIDEOS_PATH = os.environ.get(\"SCRAPPED_VIDEOS_PATH\")",
        "detail": "config",
        "documentation": {}
    }
]