[
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "BaseView",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "expose",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.auth",
        "description": "app.auth",
        "isExtraImport": true,
        "detail": "app.auth",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.account",
        "description": "app.models.account",
        "isExtraImport": true,
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "video_function",
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "isExtraImport": true,
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "YouTube",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "pytube",
        "description": "pytube",
        "isExtraImport": true,
        "detail": "pytube",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.scrapping",
        "description": "app.scrapping",
        "isExtraImport": true,
        "detail": "app.scrapping",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "APScheduler",
        "importPath": "flask_apscheduler",
        "description": "flask_apscheduler",
        "isExtraImport": true,
        "detail": "flask_apscheduler",
        "documentation": {}
    },
    {
        "label": "APScheduler",
        "importPath": "flask_apscheduler",
        "description": "flask_apscheduler",
        "isExtraImport": true,
        "detail": "flask_apscheduler",
        "documentation": {}
    },
    {
        "label": "process_channel",
        "importPath": "tools.video",
        "description": "tools.video",
        "isExtraImport": true,
        "detail": "tools.video",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "demojize",
        "importPath": "emoji",
        "description": "emoji",
        "isExtraImport": true,
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "demojize",
        "importPath": "emoji",
        "description": "emoji",
        "isExtraImport": true,
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ffmpeg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ffmpeg",
        "description": "ffmpeg",
        "detail": "ffmpeg",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "CustomAdmin",
        "kind": 6,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "class CustomAdmin(BaseView):\n    @expose('/')\n    def index(self):\n        return self.render('/admin/CustomAdmin.html')",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def home():\n    return render_template('index.html')\n@bp.route('/about')\ndef about():\n    return render_template('about.html')",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def about():\n    return render_template('about.html')",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "YoutubeChannels",
        "kind": 6,
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "peekOfCode": "class YoutubeChannels(db.Model):\n    youtube_channel_id = db.Column(\n        db.String(255), unique=True, primary_key=True)\nclass Video(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(255), nullable=False)\n    author = db.Column(db.String(255), nullable=False)\n    publish_date = db.Column(db.DateTime, nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    views = db.Column(db.Integer, nullable=False)",
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "Video",
        "kind": 6,
        "importPath": "app.models.YoutubeScrapping",
        "description": "app.models.YoutubeScrapping",
        "peekOfCode": "class Video(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(255), nullable=False)\n    author = db.Column(db.String(255), nullable=False)\n    publish_date = db.Column(db.DateTime, nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    views = db.Column(db.Integer, nullable=False)\n    length = db.Column(db.Integer, nullable=False)",
        "detail": "app.models.YoutubeScrapping",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(255), unique=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(255))\n    active = db.Column(db.Boolean(), default=True)\n    is_admin = db.Column(db.Boolean(), default=False)\n    def __repr__(self):\n        return f'<Post \"{self.username}\">'\nclass RegisterForm(FlaskForm):",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(\n        min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(\n        min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Register\")\n    def validate_username(self, username):\n        existing_user_name = User.query.filter_by(\n            username=username.data).first()\n        if existing_user_name:",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class LoginForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(\n        min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(\n        min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Login\")\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(user_id)\nclass Controller(ModelView):",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "class Controller(ModelView):\n    def is_accessible(self):\n        if current_user.is_admin is True:\n            return current_user.is_authenticated\n        else:\n            return abort(404)\n        # return current_user.is_authenticated\n    def not_auth(self):\n        return \"You are not authorized to view this page.\"",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app.models.account",
        "description": "app.models.account",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(user_id)\nclass Controller(ModelView):\n    def is_accessible(self):\n        if current_user.is_admin is True:\n            return current_user.is_authenticated\n        else:\n            return abort(404)\n        # return current_user.is_authenticated\n    def not_auth(self):",
        "detail": "app.models.account",
        "documentation": {}
    },
    {
        "label": "UserAdminView",
        "kind": 6,
        "importPath": "app.models.admin",
        "description": "app.models.admin",
        "peekOfCode": "class UserAdminView(ModelView):\n    column_display_pk = True",
        "detail": "app.models.admin",
        "documentation": {}
    },
    {
        "label": "async_task",
        "kind": 2,
        "importPath": "app.scrapping.tools.tasks",
        "description": "app.scrapping.tools.tasks",
        "peekOfCode": "def async_task():\n    asyncio.run(video_function())",
        "detail": "app.scrapping.tools.tasks",
        "documentation": {}
    },
    {
        "label": "process_channel",
        "kind": 2,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "def process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])\n    try:\n        html = requests.get(channel + \"/videos\").text\n        info = re.search('(?<={\"label\":\").*?(?=\"})', html).group()",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "def process_video(url):\n    blacklisted_chars = [\"<\", \">\", \":\", '\"', \"/\",\n                         \"backslash\", \"|\", \"?\", \"*\", \".\", \"..\"]\n    video = YouTube(\n        url,\n        on_complete_callback=None,\n        on_progress_callback=None)\n    title = video.title\n    for char in blacklisted_chars:\n        title = title.replace(char, \"\")",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "video_function",
        "kind": 2,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "def video_function():\n    try:\n        with open(\"channels.txt\", encoding=\"utf-8\") as channels:\n            for channel in channels:\n                for link in valid_links:\n                    if channel.startswith(link):\n                        try:\n                            print(f\"Processing {channel}\")\n                            process_channel(channel)\n                        except Exception:",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "get_videos",
        "kind": 2,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "def get_videos():\n    paths = []\n    paths_clean = []\n    channel_names = []\n    for root, dirs, files in os.walk(f'{os.getcwd()}/.flask-data/static/videos/'):\n        for file in files:\n            if file.lower().endswith(\".mp4\".lower()):\n                paths.append(os.path.join(root, file))\n                for path in paths:\n                    path_list = path.split(os.path.sep)[-4:]",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "valid_links",
        "kind": 5,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "valid_links = [\"https://www.youtube.com/c/\", \"https://www.youtube.com/channel/\",\n               \"https://www.youtube.com/feeds/videos.xml?channel_id=\"]\nrequest.default_range_size = 10485760\n#TODO Clean this code up\n@logger.catch\ndef process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "request.default_range_size",
        "kind": 5,
        "importPath": "app.scrapping.tools.youtube",
        "description": "app.scrapping.tools.youtube",
        "peekOfCode": "request.default_range_size = 10485760\n#TODO Clean this code up\n@logger.catch\ndef process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])",
        "detail": "app.scrapping.tools.youtube",
        "documentation": {}
    },
    {
        "label": "configure_cli",
        "kind": 2,
        "importPath": "app.commands",
        "description": "app.commands",
        "peekOfCode": "def configure_cli(app):\n    @app.cli.command()\n    def initdb():\n        db.drop_all()\n        db.create_all()\n    @app.cli.command()\n    def build():\n        system(\"pip install -r requirements.txt\")\n    @app.cli.command()\n    def deploy():",
        "detail": "app.commands",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "db = SQLAlchemy()\nbcrypt = Bcrypt()\nlogin_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "bcrypt = Bcrypt()\nlogin_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager = LoginManager()\nadmin = Admin()\nscheduler = APScheduler()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "admin = Admin()\nscheduler = APScheduler()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "scheduler = APScheduler()",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "process_channel",
        "kind": 2,
        "importPath": "tests.Youtube-Automation.tools.video",
        "description": "tests.Youtube-Automation.tools.video",
        "peekOfCode": "def process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])\n    try:\n        html = requests.get(channel + \"/videos\").text\n        info = re.search('(?<={\"label\":\").*?(?=\"})', html).group()",
        "detail": "tests.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "tests.Youtube-Automation.tools.video",
        "description": "tests.Youtube-Automation.tools.video",
        "peekOfCode": "def process_video(url):\n    blacklisted_chars = [\"<\", \">\", \":\", '\"', \"/\",\n                         \"backslash\", \"|\", \"?\", \"*\", \".\", \"..\"]\n    video = YouTube(\n        url,\n        on_complete_callback=None,\n        on_progress_callback=None)\n    title = video.title\n    for char in blacklisted_chars:\n        title = title.replace(char, \"\")",
        "detail": "tests.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "request.default_range_size",
        "kind": 5,
        "importPath": "tests.Youtube-Automation.tools.video",
        "description": "tests.Youtube-Automation.tools.video",
        "peekOfCode": "request.default_range_size = 10485760\ndef process_channel(channel):\n    if channel.startswith(\"https://www.youtube.com/feeds/videos.xml?channel_id=\"):\n        html = requests.get(channel)\n        soup = BeautifulSoup(html.text, \"xml\")\n        entry = soup.find(\"entry\")\n        link = entry.find(\"link\")\n        process_video(link[\"href\"])\n    try:\n        html = requests.get(channel + \"/videos\").text",
        "detail": "tests.Youtube-Automation.tools.video",
        "documentation": {}
    },
    {
        "label": "so_file",
        "kind": 5,
        "importPath": "tests.cLib.main",
        "description": "tests.cLib.main",
        "peekOfCode": "so_file = f\"{os.getcwd()}/tests/cLib/lib.so\"\nprint(so_file)\nmy_functions = CDLL(so_file)\nprint(type(my_functions))\nprint(my_functions.lol())",
        "detail": "tests.cLib.main",
        "documentation": {}
    },
    {
        "label": "my_functions",
        "kind": 5,
        "importPath": "tests.cLib.main",
        "description": "tests.cLib.main",
        "peekOfCode": "my_functions = CDLL(so_file)\nprint(type(my_functions))\nprint(my_functions.lol())",
        "detail": "tests.cLib.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "def main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')\n            if resp.startswith('PING'):",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "server = 'irc.chat.twitch.tv'\nport = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "port = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "nickname",
        "kind": 5,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "nickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "token = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "tests.twitch.chat_logger",
        "description": "tests.twitch.chat_logger",
        "peekOfCode": "channel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')",
        "detail": "tests.twitch.chat_logger",
        "documentation": {}
    },
    {
        "label": "get_chat_dataframe",
        "kind": 2,
        "importPath": "tests.twitch.chat_parser",
        "description": "tests.twitch.chat_parser",
        "peekOfCode": "def get_chat_dataframe(file):\n    data = []\n    with open(file, 'r', encoding='utf-8') as f:\n        lines = [line for line in f]\n        for line in lines:\n            try:\n                #print(line)\n                time_logged = line.split('—')[0].strip()\n                time_logged = datetime.strptime(time_logged, '%Y-%m-%d_%H:%M:%S')\n                username_message = line.split('—')[1:]",
        "detail": "tests.twitch.chat_parser",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "class Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job1",
        "kind": 2,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "def job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples\n@scheduler.task(\"cron\", id=\"do_job_2\", minute=1)\ndef job2():\n    \"\"\"Sample job 2.\"\"\"\n    print(f\"Job 2 executed at {current_time}\")\n@scheduler.task(\"cron\", id=\"do_job_3\", week=\"*\", day_of_week=\"sun\")\ndef job3():",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job2",
        "kind": 2,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "def job2():\n    \"\"\"Sample job 2.\"\"\"\n    print(f\"Job 2 executed at {current_time}\")\n@scheduler.task(\"cron\", id=\"do_job_3\", week=\"*\", day_of_week=\"sun\")\ndef job3():\n    \"\"\"Sample job 3.\"\"\"\n    print(f\"Job 3 executed at {current_time}\")\n@app.route(\"/\")\n@app.route(\"/home/\")\nasync def index():",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "job3",
        "kind": 2,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "def job3():\n    \"\"\"Sample job 3.\"\"\"\n    print(f\"Job 3 executed at {current_time}\")\n@app.route(\"/\")\n@app.route(\"/home/\")\nasync def index():\n    return \"<h1>Home</h1>\"\nif __name__ == \"__main__\":\n    app.config.from_object(Config())\n    # it is also possible to enable the API directly",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "app = Flask(__name__)\nnow = datetime.now()\ncurrent_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "now = datetime.now()\ncurrent_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "current_time",
        "kind": 5,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "current_time = now.strftime(\"%H:%M:%S\")\nclass Config:\n    \"\"\"App configuration.\"\"\"\n    SCHEDULER_API_ENABLED = True\nscheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "tests.backgroundtest",
        "description": "tests.backgroundtest",
        "peekOfCode": "scheduler = APScheduler()\n# interval examples\n@scheduler.task(\"interval\", id=\"do_job_1\", seconds=1, misfire_grace_time=5)\ndef job1():\n    \"\"\"Sample job 1.\"\"\"\n    print(f\"Job 1 executed at {current_time}\")\n# cron examples\n@scheduler.task(\"cron\", id=\"do_job_2\", minute=1)\ndef job2():\n    \"\"\"Sample job 2.\"\"\"",
        "detail": "tests.backgroundtest",
        "documentation": {}
    },
    {
        "label": "compress_video",
        "kind": 2,
        "importPath": "tests.test2",
        "description": "tests.test2",
        "peekOfCode": "def compress_video(video_full_path, output_file_name, target_size):\n    # Reference: https://en.wikipedia.org/wiki/Bit_rate#Encoding_bit_rate\n    min_audio_bitrate = 32000\n    max_audio_bitrate = 256000\n    probe = ffmpeg.probe(video_full_path)\n    # Video duration, in s.\n    duration = float(probe['format']['duration'])\n    # Audio bitrate, in bps.\n    audio_bitrate = float(next(\n        (s for s in probe['streams'] if s['codec_type'] == 'audio'), None)['bit_rate'])",
        "detail": "tests.test2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "def main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')\n            if resp.startswith('PING'):",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "server = 'irc.chat.twitch.tv'\nport = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "port = 6667\nnickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "nickname",
        "kind": 5,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "nickname = 'thugbot'\ntoken = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "token = 'oauth:tisxtqv1o2e69stq52085lmle4g64b'\nchannel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "tests.twitch",
        "description": "tests.twitch",
        "peekOfCode": "channel = '#adinross'\ndef main():\n    sock = socket.socket()\n    sock.connect((server, port))\n    sock.send(f\"PASS {token}\\r\\n\".encode('utf-8'))\n    sock.send(f\"NICK {nickname}\\r\\n\".encode('utf-8'))\n    sock.send(f\"JOIN {channel}\\r\\n\".encode('utf-8'))\n    try:\n        while True:\n            resp = sock.recv(2048).decode('utf-8')",
        "detail": "tests.twitch",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    PORT = os.environ.get('PORT') or 5000\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')\\\n        or 'sqlite:///' + os.path.join(basedir, 'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECURITY_PASSWORD_SALT = os.environ.get('SECURITY_PASSWORD_SALT')\n    SCRAPPED_VIDEOS_PATH = os.environ.get('SCRAPPED_VIDEOS_PATH')\n# FINISH the logger configuration\nlogger.add(sys.stderr,",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\n# TODO Update variables\nclass Config:\n    PORT = os.environ.get('PORT') or 5000\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')\\\n        or 'sqlite:///' + os.path.join(basedir, 'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECURITY_PASSWORD_SALT = os.environ.get('SECURITY_PASSWORD_SALT')\n    SCRAPPED_VIDEOS_PATH = os.environ.get('SCRAPPED_VIDEOS_PATH')",
        "detail": "config",
        "documentation": {}
    }
]