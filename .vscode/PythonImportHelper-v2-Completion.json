[
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "cloudscraper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudscraper",
        "description": "cloudscraper",
        "detail": "cloudscraper",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "views",
        "description": "views",
        "isExtraImport": true,
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "views",
        "description": "views",
        "isExtraImport": true,
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "scrap_twitch",
        "importPath": "util.scraper",
        "description": "util.scraper",
        "isExtraImport": true,
        "detail": "util.scraper",
        "documentation": {}
    },
    {
        "label": "get_subs_from_tracker",
        "importPath": "util.scraper",
        "description": "util.scraper",
        "isExtraImport": true,
        "detail": "util.scraper",
        "documentation": {}
    },
    {
        "label": "scrap_twitch",
        "kind": 2,
        "importPath": ".flask-data.util.scraper",
        "description": ".flask-data.util.scraper",
        "peekOfCode": "def scrap_twitch():\n    scraper = cloudscraper.create_scraper(delay=10, browser='chrome') \n    url = \"https://twitchtracker.com/subscribers\"\n    info = scraper.get(url).text\n    soup = BeautifulSoup(info, \"html.parser\")\n    streamers = soup.find_all('td')\n    top_20 = []\n    for streamer in streamers:\n        #print(streamer.get_text().strip())\n        top_20.append(streamer.get_text().strip())",
        "detail": ".flask-data.util.scraper",
        "documentation": {}
    },
    {
        "label": "get_subs_from_tracker",
        "kind": 2,
        "importPath": ".flask-data.util.scraper",
        "description": ".flask-data.util.scraper",
        "peekOfCode": "def get_subs_from_tracker(channel):\n    URL = f'https://twitchtracker.com/{channel.lower()}/subscribers'\n    HEADERS = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    response = requests.get(URL, headers=HEADERS)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    try:\n        subs_counter = soup.find(\"span\", {\"class\": \"to-number\"}).getText()\n        return subs_counter\n    except:",
        "detail": ".flask-data.util.scraper",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\nadmin = Admin(app, name='Jaylen Site', template_mode='bootstrap4')\nadmin.add_view(ModelView(User, db.session))\nclass RegisterForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Register\")",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Register\")\n    def validate_username(self, username):\n        existing_user_name = User.query.filter_by(username=username.data).first()\n        if existing_user_name:\n            raise ValidationError(\"Username already exists. Please choose a different one.\")\nclass LoginForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "class LoginForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Login\")\n@app.route(\"/\")\n@app.route(\"/home/\")\ndef index():\n    return render_template(\"index.html\")\n@app.route(\"/dev/dev/\")\ndef dev():",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\nadmin = Admin(app, name='Jaylen Site', template_mode='bootstrap4')\nadmin.add_view(ModelView(User, db.session))\nclass RegisterForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")\n@app.route(\"/dev/dev/\")\ndef dev():\n    return render_template(\"dev.html\")\n@app.route(\"/dev/dev-A/\")\ndef dev_():\n    return render_template(\"dev1.html\")\n@app.route(\"/dashboard/\", methods=[\"GET\", \"POST\"])\n@login_required",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "dev",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def dev():\n    return render_template(\"dev.html\")\n@app.route(\"/dev/dev-A/\")\ndef dev_():\n    return render_template(\"dev1.html\")\n@app.route(\"/dashboard/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef dashboard():\n    return render_template(\"dashboard.html\")\n@app.route(\"/logout/\", methods=[\"GET\", \"POST\"])",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "dev_",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def dev_():\n    return render_template(\"dev1.html\")\n@app.route(\"/dashboard/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef dashboard():\n    return render_template(\"dashboard.html\")\n@app.route(\"/logout/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef logout():\n    logout_user()",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def dashboard():\n    return render_template(\"dashboard.html\")\n@app.route(\"/logout/\", methods=[\"GET\", \"POST\"])\n@login_required\ndef logout():\n    logout_user()\n    flash(\"You have been logged out.\", category=\"info\")\n    return redirect(url_for(\"index\"))\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def logout():\n    logout_user()\n    flash(\"You have been logged out.\", category=\"info\")\n    return redirect(url_for(\"index\"))\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for(\"dashboard\"))\n    form = LoginForm()\n    if form.validate_on_submit():",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect(url_for(\"dashboard\"))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user:\n            if bcrypt.check_password_hash(user.password, form.password.data):\n                login_user(user)\n                return redirect(url_for(\"dashboard\"))",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def register():\n    form = RegisterForm()\n    if form.validate_on_submit():\n        hashed_password = bcrypt.generate_password_hash(form.password.data)\n        new_user = User(username=form.username.data, password=hashed_password)\n        db.session.add(new_user)\n        db.session.commit()\n        flash('Your account has been created! You are now able to log in', 'success')\n        return redirect(url_for('login'))\n    return render_template(\"register.html\", form=form)",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "pocket_watch",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def pocket_watch():\n    return render_template(\"Pocket-Watch.html\")\n@app.route(\"/dynamic_page/\")\ndef dynamic_page():\n    return get_subs_from_tracker(\"yourragegaming\")\n@app.route(\"/dynamic_page2/\")\ndef dynamic_page2():\n    return scrap_twitch()",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "dynamic_page",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def dynamic_page():\n    return get_subs_from_tracker(\"yourragegaming\")\n@app.route(\"/dynamic_page2/\")\ndef dynamic_page2():\n    return scrap_twitch()",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "dynamic_page2",
        "kind": 2,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "def dynamic_page2():\n    return scrap_twitch()",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "app = Flask(__name__)\nbcrypt = Bcrypt(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config[\"SECRET_KEY\"] = \"secret\"\napp.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "bcrypt = Bcrypt(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config[\"SECRET_KEY\"] = \"secret\"\napp.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config[\"SECRET_KEY\"] = \"secret\"\napp.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.config[\"SECRET_KEY\"] = \"secret\"\napp.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "app.config[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "app.config[\"SECRET_KEY\"] = \"secret\"\napp.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "app.config['FLASK_ADMIN_SWATCH']",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "app.config['FLASK_ADMIN_SWATCH'] = 'cerulean'\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "db = SQLAlchemy(app)\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "login_manager.login_view = \"login\"\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\nclass User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), nullable=False, unique=True)\n    password = db.Column(db.String(80), nullable=False)\nadmin = Admin(app, name='Jaylen Site', template_mode='bootstrap4')\nadmin.add_view(ModelView(User, db.session))",
        "detail": ".flask-data.views",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": ".flask-data.views",
        "description": ".flask-data.views",
        "peekOfCode": "admin = Admin(app, name='Jaylen Site', template_mode='bootstrap4')\nadmin.add_view(ModelView(User, db.session))\nclass RegisterForm(FlaskForm):\n    username = StringField(label=\"Username\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Username\"})\n    password = PasswordField(label=\"Password\", validators=[DataRequired(), Length(min=4, max=20)], render_kw={\"placeholder\": \"Password\"})\n    submit = SubmitField(label=\"Register\")\n    def validate_username(self, username):\n        existing_user_name = User.query.filter_by(username=username.data).first()\n        if existing_user_name:\n            raise ValidationError(\"Username already exists. Please choose a different one.\")",
        "detail": ".flask-data.views",
        "documentation": {}
    }
]